{"version":3,"sources":["components/Header.module.css","components/Recipe.module.css","components/Recipes.module.css","components/Recipes.jsx","components/Recipe.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipes","renderSearch","renderBody","className","style","recipes","Recipe","title","calories","image","ingredients","tags","recipe","src","alt","Math","round","map","ingredient","index","key","text","tag","Header","getSearch","search","updateSearch","logo","onSubmit","type","value","onChange","App","useState","setRecipes","setSearch","query","setQuery","loading","setLoading","useEffect","getRecipes","a","fetch","response","json","data","hits","length","e","preventDefault","trim","target","label","healthLabels","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,cAAc,4BAA4B,aAAa,2BAA2B,gBAAgB,gC,iBCAhJD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,IAAM,sB,oBCAtFD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,gBAAgB,iC,wMCWtDC,EATC,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAC/B,OACE,6BACE,6BAAMD,KACN,yBAAKE,UAAWC,IAAMC,SAAUH,O,gBCoBvBI,EAxBA,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACrD,OACE,yBAAKR,UAAWC,IAAMQ,QACpB,yBAAKC,IAAKJ,EAAOK,IAAI,KACrB,wBAAIX,UAAWC,IAAMG,OAAQA,GAC7B,2BAAIQ,KAAKC,MAAMR,GAAf,QACA,0CACA,4BACGE,EAAYO,KAAI,SAACC,EAAYC,GAAb,OACf,wBAAIC,IAAKD,GAAQD,EAAWG,UAGhC,mCACQ,IACLV,EAAKM,KAAI,SAACK,EAAKH,GAAN,OACR,0BAAMC,IAAKD,EAAOhB,UAAWC,IAAMkB,KAChCA,S,gBCMEC,EAtBA,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACnC,OACE,gCACE,yBAAKvB,UAAWC,IAAMuB,MAAtB,oBACA,4BACE,sCAEF,0BAAMC,SAAUJ,EAAWrB,UAAWC,IAAM,gBAC1C,2BACED,UAAWC,IAAM,cACjByB,KAAK,OACLC,MAAOL,EACPM,SAAUL,IAEZ,4BAAQvB,UAAWC,IAAM,iBAAkByB,KAAK,UAAhD,aCyEOG,G,MAlFH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAIT5B,EAJS,KAIA6B,EAJA,OAKYD,mBAAS,IALrB,mBAKTR,EALS,KAKDU,EALC,OAMUF,mBAAS,UANnB,mBAMTG,EANS,KAMFC,EANE,OAOcJ,oBAAS,GAPvB,mBAOTK,EAPS,KAOAC,EAPA,KAShBC,qBAAU,WACRC,MACC,CAACL,IAEJ,IAAMK,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSP,EADT,mBAbf,WAae,oBAZd,qCAWG,cACXQ,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAMjBZ,EAAWY,EAAKC,MAChBR,GAAW,GACc,IAArBO,EAAKC,KAAKC,QACZT,GAAW,GATI,2CAAH,qDAuDhB,OACE,6BACE,kBAAC,EAAD,CACEf,UAxCY,SAACyB,GACjBA,EAAEC,iBACoB,KAAlBzB,EAAO0B,SAIXZ,GAAW,GACXF,EAASZ,GAETU,EAAU,MAgCNV,OAAQA,EACRC,aA/Ce,SAACuB,GACpBd,EAAUc,EAAEG,OAAOtB,UAgDjB,8BACE,kBAAC,EAAD,CAAS7B,aAjCM,WACnB,OAAuB,IAAnBI,EAAQ2C,QAAiBV,EAOpB,wBAAInC,UAAU,iBAAd,kBAA8CiC,GALnD,wBAAIjC,UAAU,gBAAd,yBACyBiC,EADzB,wBA8BqClC,WArBxB,WACjB,OAAOG,EAAQY,KAAI,SAACL,GAAD,OACjB,kBAAC,EAAD,CACEQ,IAAKR,EAAOA,OAAOyC,MACnB9C,MAAOK,EAAOA,OAAOyC,MACrB7C,SAAUI,EAAOA,OAAOJ,SACxBC,MAAOG,EAAOA,OAAOH,MACrBC,YAAaE,EAAOA,OAAOF,YAC3BC,KAAMC,EAAOA,OAAO0C,yBC3DRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.72370d5e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__2ins2\",\"search-form\":\"Header_search-form__3pgz8\",\"search-bar\":\"Header_search-bar__3in0T\",\"search-button\":\"Header_search-button__3zKA5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__2P_tg\",\"title\":\"Recipe_title__3TYhV\",\"tag\":\"Recipe_tag__2VBEB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipes\":\"Recipes_recipes__2g9J1\",\"search-result\":\"Recipes_search-result__1OA4n\"};","import React from 'react';\nimport style from './Recipes.module.css';\n\nconst Recipes = ({ renderSearch, renderBody }) => {\n  return (\n    <div>\n      <div>{renderSearch()}</div>\n      <div className={style.recipes}>{renderBody()}</div>\n    </div>\n  );\n};\n\nexport default Recipes;\n","import React from 'react';\nimport style from './Recipe.module.css';\n\nconst Recipe = ({ title, calories, image, ingredients, tags }) => {\n  return (\n    <div className={style.recipe}>\n      <img src={image} alt='' />\n      <h1 className={style.title}>{title}</h1>\n      <p>{Math.round(calories)}kcal</p>\n      <p>Ingredients</p>\n      <ul>\n        {ingredients.map((ingredient, index) => (\n          <li key={index}>{ingredient.text}</li>\n        ))}\n      </ul>\n      <p>\n        Tags:{' '}\n        {tags.map((tag, index) => (\n          <span key={index} className={style.tag}>\n            {tag}\n          </span>\n        ))}\n      </p>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React from 'react';\nimport style from './Header.module.css';\n\nconst Header = ({ getSearch, search, updateSearch }) => {\n  return (\n    <header>\n      <div className={style.logo}>Graceful Recipes</div>\n      <ul>\n        <li>About</li>\n      </ul>\n      <form onSubmit={getSearch} className={style['search-form']}>\n        <input\n          className={style['search-bar']}\n          type='text'\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className={style['search-button']} type='submit'>\n          Search\n        </button>\n      </form>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Recipes from './components/Recipes';\nimport Recipe from './components/Recipe';\nimport About from './components/About';\nimport Header from './components/Header';\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = '61085f7e';\n  const APP_KEY = 'e3238ca787f9507ef2159b0bf62ac8fc';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('kimchi');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n\n    setRecipes(data.hits);\n    setLoading(true);\n    if (data.hits.length === 0) {\n      setLoading(false);\n    }\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  // Search only gets updated when the query is set/ button is clicked\n  const getSearch = (e) => {\n    e.preventDefault();\n    if (search.trim() === '') {\n      return;\n    }\n\n    setLoading(true);\n    setQuery(search);\n    // Clear the input field\n    setSearch('');\n  };\n\n  const renderSearch = () => {\n    if (recipes.length === 0 && !loading) {\n      return (\n        <h1 className='errorMessage'>\n          There is no result of {query}. Please try again.\n        </h1>\n      );\n    } else {\n      return <h1 className='search-result'>Search Result: {query}</h1>;\n    }\n  };\n\n  const renderBody = () => {\n    return recipes.map((recipe) => (\n      <Recipe\n        key={recipe.recipe.label}\n        title={recipe.recipe.label}\n        calories={recipe.recipe.calories}\n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        tags={recipe.recipe.healthLabels}\n      />\n    ));\n  };\n\n  return (\n    <div>\n      <Header\n        getSearch={getSearch}\n        search={search}\n        updateSearch={updateSearch}\n      />\n      <main>\n        <Recipes renderSearch={renderSearch} renderBody={renderBody} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}